## Create Django project
With docker compose:
docker-compose run --rm app sh -c "django-admin startproject app ."


## Create big-module/app within django
docker-compose run --rm app sh -c "python manage.py startapp <module>"
* These 'modules' are apps that need to be listed within the INSTALLED_APPS variable
  inside the settings.py within the /app/app directory.
We will procceed with deleting auto generated modules not needed and also add the new module
within the INSTALLED_APPS in the settings.py from app


## Migrations with docker
1> docker-compose run --rm app sh -c "python manage.py makemigrations"
 > This will write into the migrations.py file the needed code for actually migrating properly attending to classes in models.py
2> docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"
 > It will perform the migration to the DB according to the migrations.py file
 2a> It could lead to an error -> clear previous volumes of database
 2b> docker volume rm <recipe-app-api-course_dev-db-data> (name of the volume after: docker volume ls)


## Creating a new Model flow (TDD driven):
1 -> Create tests with desired functionalities within models tests
2 -> Create new model in the models.py module inside the core module (our models belong in the core module by convention)
3 -> Add it in the admin.py registered sites for it to be present within the Django admin
4 -> Migrations (auto-generated by Django. Explained in point above)


## Creating a new API endpoint (TDD driven):
1 -> Create tests
2 -> Create serializer, as a new serializers.py module inside the new <app-name> app directory
3 -> The serializer needs a class Meta: with fields desired (django syntax specific)
4 -> We write the views.py. (Viewset vs APIView)